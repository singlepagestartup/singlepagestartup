---
description: 
globs: 
alwaysApply: true
---
You are an expert engineer specialized in SinglePageStartup (SPS) projects.

You work with:
- TypeScript (functional, declarative programming)
- Node.js (Bun runtime)
- Next.js (App Router, Server Components, Partial Prerendering)
- React (Server Components first, Client Components minimized)
- Shadcn UI, Radix UI, TailwindCSS (mobile-first, responsive design)

Framework: SinglePageStartup (SPS)

Key Architectural Principles:
- Every feature is based on a Model with an automatically generated REST API (Hono+Bun).
- Each Model has one or more frontend display Variants.
- Models are related through explicit Relation Models (e.g., ArticlesToFileStorageModuleFiles).
- Models and Relations have both server-side (API) and client-side (Component) layers.
- No direct data fetching inside components; data flows through Providers and API adapters.
- All backend error handling must use ExceptionFilter and shared middlewares.

Directory Structure:
- Backend API: Hono apps mounted under `apps/api`.
- Frontend: Next.js App Router under `apps/host`.
- Models located under `libs/modules/{module}/models/{model}`.
- Relations located under `libs/modules/{module}/relations/{model}`.
- SinglePageStartup team components placed under `frontend/component/src/lib/singlepage/{variant}`.
- Developer components placed under `frontend/component/src/lib/startup/{variant}`.

Frontend Component Variant Must Include:
- `interface.ts`: Exports `IComponentProps` and `IComponentPropsExtended`, based on IParentComponentProps from `@sps/shared-frontend-components`.
- `index.tsx`: Connects the component via `ParentComponent`, passing `Provider`, `clientApi`, and `serverApi`.
- `Component.tsx`: Pure functional React component; renders base model data and uses relation components to load linked data.

Prop and Typing Standards:
- Props for all components must extend:
  - `IParentComponentProps<IModel, typeof variant>` → for minimal props.
  - `IParentComponentPropsExtended<IModel, typeof variant, IComponentProps>` → for fully loaded props.
- Variants are declared as string literal constants (e.g., `export const variant = "card-gallery-default" as const`).

Backend Standards:
- Middlewares for API should be composed from:
  - RequestIdMiddleware
  - ObserverMiddleware
  - RevalidationMiddleware
  - HTTPCacheMiddleware (only conditionally activated)
- Error handling must rely on centralized ExceptionFilter catching.
- CORS settings must follow shared configuration from `shared-backend-api`.

Code Style Rules:
- Functional, declarative code structure everywhere.
- Avoid classes and inheritance; use composition and small pure functions.
- All functions must be explicitly declared with the `function` keyword.
- Interface-first TypeScript style; interfaces preferred over types.
- No enums; use union types or maps.

Naming Conventions:
- Directories and files: lowercase with dashes (e.g., `card-gallery-default`, `articles-count-default`).
- Components and interfaces: PascalCase (e.g., `CardGalleryDefaultComponent`, `ICardGalleryDefaultComponentProps`).
- API operations: camelCase functions (e.g., `findById`, `findMany`).

API Handling:
- Use generated `clientApi` and `serverApi` from model SDKs.
- Always use the provided `Provider` from SDK for server-side data handling.
- Frontend components for relations must query their own data based on the main model’s ID through `variant="find"` and APIProps.

Styling and UI:
- UI components must use Shadcn UI, Radix UI, and TailwindCSS.
- Apply mobile-first responsive layouts.
- Avoid inline styles unless absolutely necessary.

Performance and Rendering:
- Prefer Server Components (React + Next.js App Router) for everything by default.
- Minimize `use client`, `useEffect`, and `setState`.
- Use Suspense and dynamic imports for Client Components.
- Optimize for Web Vitals (LCP, CLS, FID) through fast server-side rendering.

Infrastructure Notes:
- Do not modify files under `apps/db`, `apps/redis`, `tools/deployer`, `.github`.
- Use `up.sh` for local environment initialization (Postgres + Redis).
- Use Bun for backend runtime.

Testing and Linting:
- Respect ESLint rules configured in `eslint.config.js`.
- Respect formatting via Prettier.
- Use Jest with provided client/server presets.

Environment:
- All environments (`dev`, `prod`, `preview`) must derive from `.env` generated by `create_env.sh`.
