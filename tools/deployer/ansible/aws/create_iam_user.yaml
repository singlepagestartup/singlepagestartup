---
- name: Create IAM user
  hosts: all
  become: yes
  vars:
    - aws_access_key_id: "{{ AWS_ACCESS_KEY_ID }}"
    - aws_secret_access_key: "{{ AWS_SECRET_ACCESS_KEY }}"
    - project_name: "{{ PROJECT_NAME }}"
    - aws_s3_bucket: "{{ AWS_S3_BUCKET }}"
  tasks:
    - name: Check is iam.env file exists
      stat:
        path: "/home/code/iam.env"
      register: iam

    - name: Create iam
      block:
        - name: Get ansible ansible_system_vendor
          set_fact:
            ansible_system_vendor: "{{ hostvars[inventory_hostname]['ansible_system_vendor'] }}"

        - name: If DigitalOcean
          block:
            - name: Install required Python packages
              pip:
                name: "{{ item }}"
                state: present
                executable: pip3
                extra_args: --no-build-isolation --break-system-packages
              loop:
                - boto
                - boto3
                - botocore
                - awscli
          when: ansible_system_vendor == "DigitalOcean"

        - name: If not DigitalOcean
          block:
            - name: Install required Python packages
              pip:
                name: "{{ item }}"
                state: present
                executable: pip3
                extra_args: --no-build-isolation
              loop:
                - boto
                - boto3
                - botocore
                - awscli
          when: ansible_system_vendor != "DigitalOcean"

        - name: Create IAM user
          amazon.aws.iam_user:
            name: "{{ item }}"
            state: present
            aws_access_key: "{{ aws_access_key_id }}"
            aws_secret_access_key: "{{ aws_secret_access_key }}"
          loop:
            - "{{ project_name }}"
            - "{{ project_name }}dev"

        - name: Create user's key
          community.aws.iam_access_key:
            user_name: "{{ project_name }}"
            state: present
            aws_access_key: "{{ aws_access_key_id }}"
            aws_secret_access_key: "{{ aws_secret_access_key }}"
          register: user_key

        - name: Create dev user's key
          community.aws.iam_access_key:
            user_name: "{{ project_name }}dev"
            state: present
            aws_access_key: "{{ aws_access_key_id }}"
            aws_secret_access_key: "{{ aws_secret_access_key }}"
          register: dev_user_key

        - name: Write key to file
          copy:
            content: "AWS_ACCESS_KEY_ID={{ user_key.access_key.access_key_id }}\nAWS_SECRET_ACCESS_KEY={{ user_key.secret_access_key }}"
            dest: /home/code/iam.env
            mode: 0600

        - name: Write dev key to file
          copy:
            content: "AWS_ACCESS_KEY_ID={{ dev_user_key.access_key.access_key_id }}\nAWS_SECRET_ACCESS_KEY={{ dev_user_key.secret_access_key }}"
            dest: /home/code/dev.iam.env
            mode: 0600

        - name: Create policy for S3 bucket
          community.aws.iam_policy:
            iam_type: user
            iam_name: "{{ project_name }}"
            state: present
            policy_name: "single-s3-bucket-policy-{{ project_name }}"
            policy_json: "{{ lookup('template','single_s3_bucket_policy.j2') }}"
            aws_access_key: "{{ aws_access_key_id }}"
            aws_secret_access_key: "{{ aws_secret_access_key }}"

        - name: Create policy for dev S3 bucket
          community.aws.iam_policy:
            iam_type: user
            iam_name: "{{ project_name }}dev"
            state: present
            policy_name: "single-s3-bucket-policy-{{ project_name }}dev"
            policy_json: "{{ lookup('template','single_s3_dev_bucket_policy.j2') }}"
            aws_access_key: "{{ aws_access_key_id }}"
            aws_secret_access_key: "{{ aws_secret_access_key }}"

        - name: Create SES policy
          community.aws.iam_policy:
            iam_type: user
            iam_name: "{{ project_name }}"
            state: present
            policy_name: "ses-policy"
            policy_json: "{{ lookup('template','ses_policy.j2') }}"
            aws_access_key: "{{ aws_access_key_id }}"
            aws_secret_access_key: "{{ aws_secret_access_key }}"

        - name: Create dev SES policy
          community.aws.iam_policy:
            iam_type: user
            iam_name: "{{ project_name }}dev"
            state: present
            policy_name: "ses-policy-dev"
            policy_json: "{{ lookup('template','ses_policy.j2') }}"
            aws_access_key: "{{ aws_access_key_id }}"
            aws_secret_access_key: "{{ aws_secret_access_key }}"
      when: iam.stat.exists == False

    - name: Copy key to local
      fetch:
        src: "/home/code/{{ item }}"
        dest: "./"
        flat: yes
      loop:
        - iam.env
        - dev.iam.env
